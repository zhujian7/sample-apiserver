name: Security

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

  gosec:
    name: Go Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

  trivy-fs:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in filesystem mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  trivy-config:
    name: Trivy Config Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy config scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'

    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'

  semgrep:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"

    - name: Upload SARIF file for GitHub Advanced Security Dashboard
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: docker build -t mytest-apiserver:security-scan .

    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mytest-apiserver:security-scan'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-docker-results.sarif'

    - name: Run Anchore Grype vulnerability scanner
      uses: anchore/scan-action@v6
      id: grype-scan
      with:
        image: 'mytest-apiserver:security-scan'
        fail-build: false
        severity-cutoff: critical
        output-format: sarif

    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  kubernetes-security:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Kubesec scan
      run: |
        curl -sSX POST --data-binary @deploy/base/deploy.yaml \
          https://v2.kubesec.io/scan > kubesec-results.json
        
        # Check if there are any critical issues
        SCORE=$(cat kubesec-results.json | jq '.[0].score')
        echo "Kubesec score: $SCORE"
        
        if [ "$SCORE" -lt 0 ]; then
          echo "‚ùå Kubesec scan failed with score: $SCORE"
          cat kubesec-results.json | jq '.[0].advise'
          exit 1
        fi

    - name: Run Polaris scan
      run: |
        # Install Polaris CLI
        curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz | tar xz
        chmod +x polaris
        
        # Run Polaris audit
        ./polaris audit --audit-path deploy/base/ --format json > polaris-results.json
        
        # Check results
        ERRORS=$(cat polaris-results.json | jq '.Results[].PodResult.Results | length')
        echo "Polaris found $ERRORS potential issues"

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: k8s-security-results
        path: |
          kubesec-results.json
          polaris-results.json

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run Nancy (Go dependency scanner)
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Generate Go module dependency graph
      run: |
        go mod graph > go-deps.txt
        echo "Go module dependencies:"
        head -20 go-deps.txt

    - name: Check for known vulnerable packages
      run: |
        # Check against a simple list of known vulnerable packages
        echo "Checking for known vulnerable dependencies..."
        
        # This is a basic check - in production, you'd use a more comprehensive database
        VULN_PACKAGES="github.com/gin-gonic/gin@v1.6.0"
        
        if go list -m all | grep -F "$VULN_PACKAGES"; then
          echo "‚ùå Found vulnerable dependencies!"
          exit 1
        else
          echo "‚úÖ No known vulnerable dependencies found"
        fi

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [govulncheck, gosec, trivy-fs, trivy-config, semgrep, codeql, docker-security, kubernetes-security, dependency-check, secrets-scan]
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "## üîí Security Scan Summary"
        echo ""
        echo "| Scanner | Status |"
        echo "|---------|--------|"
        echo "| Go Vulnerability Check | ${{ needs.govulncheck.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Gosec | ${{ needs.gosec.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Trivy Filesystem | ${{ needs.trivy-fs.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Trivy Config | ${{ needs.trivy-config.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Semgrep | ${{ needs.semgrep.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| CodeQL | ${{ needs.codeql.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Docker Security | ${{ needs.docker-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Kubernetes Security | ${{ needs.kubernetes-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"