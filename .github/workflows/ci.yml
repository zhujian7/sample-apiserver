name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v1.57'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Vet
      run: make vet

    - name: Lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

    - name: Run unit tests
      run: make test-unit

    - name: Run tests with race detection
      run: make test-race

    - name: Generate coverage report
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/combined.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Build binary
      run: make build

    - name: Build Linux binary
      run: make build-linux

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mytest-apiserver-binaries
        path: |
          bin/mytest-apiserver
          bin/mytest-apiserver-linux
        retention-days: 30

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Download dependencies
      run: make deps

    - name: Create Kind cluster
      run: make kind-create

    - name: Build and deploy
      run: |
        make docker-build
        kind load docker-image quay.io/zhujian/mytest-apiserver:dev --name kind
        make deploy

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/mytest-apiserver -n my-apiserver-system
        kubectl wait --for=condition=ready --timeout=120s certificate/my-apiserver-ca -n my-apiserver-system || true
        kubectl wait --for=condition=ready --timeout=120s certificate/mytest-apiserver-cert -n my-apiserver-system || true

    - name: Run integration tests
      run: make quick-test

    - name: Check deployment status
      run: make status

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== API Server Logs ==="
        kubectl logs -n my-apiserver-system -l app=mytest-apiserver --tail=100
        echo "=== Events ==="
        kubectl get events -n my-apiserver-system --sort-by=.metadata.creationTimestamp
        echo "=== APIService Status ==="
        kubectl describe apiservice v1alpha1.things.myorg.io

    - name: Cleanup
      if: always()
      run: make kind-delete

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check.json'

    - name: Lint markdown
      uses: DavidAnson/markdownlint-cli2-action@v16
      with:
        globs: '**/*.md'