# rbac+deploy.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: my-apiserver-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mytest-apiserver
  namespace: my-apiserver-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mytest-apiserver-delegated-auth
rules:
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
  - apiGroups: ["authorization.k8s.io"]
    resources: ["subjectaccessreviews"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mytest-apiserver-auth-reader
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
    resourceNames: ["extension-apiserver-authentication"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["flowcontrol.apiserver.k8s.io"]
    resources: ["flowschemas", "prioritylevelconfigurations"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mytest-apiserver-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mytest-apiserver-auth-reader
subjects:
  - kind: ServiceAccount
    name: mytest-apiserver
    namespace: my-apiserver-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mytest-apiserver-delegated-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mytest-apiserver-delegated-auth
subjects:
  - kind: ServiceAccount
    name: mytest-apiserver
    namespace: my-apiserver-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mytest-apiserver-auth-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mytest-apiserver-auth-reader
subjects:
  - kind: ServiceAccount
    name: mytest-apiserver
    namespace: my-apiserver-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mytest-apiserver
  namespace: my-apiserver-system
spec:
  replicas: 1
  selector:
    matchLabels: {app: mytest-apiserver}
  template:
    metadata:
      labels: {app: mytest-apiserver}
    spec:
      serviceAccountName: mytest-apiserver
      containers:
        - name: server
          image: quay.io/zhujian/mytest-apiserver:dev # or mytest-apiserver:dev if using Docker
          imagePullPolicy: Always
          args:
            - --secure-port=8443
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
          ports:
            - containerPort: 8443
          volumeMounts:
            - name: tls
              mountPath: /tls
              readOnly: true
      volumes:
        - name: tls
          secret:
            secretName: mytest-apiserver-tls
---
apiVersion: v1
kind: Service
metadata:
  name: mytest-apiserver
  namespace: my-apiserver-system
spec:
  selector: {app: mytest-apiserver}
  ports:
    - port: 443
      targetPort: 8443

